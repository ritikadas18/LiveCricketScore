{"version":3,"sources":["img/final.jpg","logo.svg","components/Navbar.js","api/Api.js","components/MyCard.js","App.js","serviceWorker.js","index.js"],"names":["useStyle","makeStyles","theme","console","log","Navbar","AppBar","color","position","style","flexFlow","Toolbar","IconButton","edge","Typography","variant","flexGrow","Button","API_KEY","MyCard","match","useState","App","matches","setMatches","useEffect","url","fetch","then","response","json","catch","error","getMatches","data","alert","className","marginTop","Grid","container","item","sm","map","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"iJAAA,OAAe,cAA0B,mC,8FCA1B,I,6ECWTA,EAAWC,aAAW,SAACC,GAC3BC,QAAQC,IAAI,QAASF,MAyBRG,EAtBA,WACGL,IAEhB,OACE,8BACE,cAACM,EAAA,EAAD,CAAQC,MAAM,UAAUC,SAAS,SAASC,MAAO,CAAEC,SAAU,GAA7D,SACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAYC,KAAK,QAAQN,MAAM,UAA/B,SACE,cAAC,IAAD,MAGF,cAACO,EAAA,EAAD,CAAYC,QAAQ,KAApB,yBAEA,sBAAMN,MAAO,CAAEO,SAAU,KAEzB,cAACC,EAAA,EAAD,CAAQV,MAAM,UAAd,2B,sBC9BJW,G,wCAAU,gCCwIDC,EAnHA,SAAC,GAAc,EAAZC,MAAa,IAC7B,EAA4BC,mBAAS,IAArC,mBACA,GADA,UACwBA,oBAAS,IAAjC,8BCiBaC,MAhCf,WACE,MAA8BD,mBAAS,IAAvC,mBAAOE,EAAP,KAAgBC,EAAhB,KAcA,OAZAC,qBAAU,YFTc,WACxB,IAAMC,EAAG,iDAA6CR,GAEtD,OADAf,QAAQC,IAAI,MAAOsB,GACZC,MAAMD,GACVE,MAAK,SAACC,GACL,OAAOA,EAASC,UAEjBC,OAAM,SAACC,GACN7B,QAAQC,IAAI,SAAU4B,OEExBC,GACGL,MAAK,SAACM,GACLV,EAAWU,EAAKX,SAChBpB,QAAQC,IAAImB,MAEXQ,OAAM,SAACC,GAAD,OAAWG,MAAM,4BAE3B,IAKD,sBAAKC,UAAU,MAAf,UACE,cAAC,EAAD,IACE,cAACtB,EAAA,EAAD,CAAYC,QAAQ,KAAKN,MAAQ,CAAC4B,UAAW,IAA7C,kDACA,eAACC,EAAA,EAAD,CAAMC,WAAS,EAAf,UACA,cAACD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAG,MACZ,cAACH,EAAA,EAAD,CAAME,MAAI,EAACC,GAAG,IAAd,SACKlB,EAAQmB,KAAI,SAACtB,GAAD,OACT,cAAC,EAAD,CAAQA,MAAM,sBCnBZuB,QACa,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS1B,MACvB,2DCZR2B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDyHlB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdzB,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMyB,c","file":"static/js/main.c5869df9.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/final.de952000.jpg\";","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from \"react\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport {\r\n  Button,\r\n  IconButton,\r\n  makeStyles,\r\n  Toolbar,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\n\r\nconst useStyle = makeStyles((theme) => {\r\n  console.log(\"STYLE\", theme);\r\n});\r\n\r\nconst Navbar = () => {\r\n  const classes = useStyle();\r\n\r\n  return (\r\n    <div>\r\n      <AppBar color=\"primary\" position=\"static\" style={{ flexFlow: 1 }}>\r\n        <Toolbar>\r\n          <IconButton edge=\"start\" color=\"inherit\">\r\n            <MenuIcon />\r\n          </IconButton>\r\n\r\n          <Typography variant=\"h6\">Live Score </Typography>\r\n\r\n          <span style={{ flexGrow: 1 }}></span>\r\n\r\n          <Button color=\"inherit\">Login</Button>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Navbar;","const API_KEY = \"W5URpqsXPrgItXMxx9wpknbmUo53\";\r\n\r\nexport const getMatches = () => {\r\n  const url = `https://cricapi.com/api/matches?apikey=${API_KEY}`;\r\n  console.log(\"URL\", url);\r\n  return fetch(url)\r\n    .then((response) => {\r\n      return response.json();\r\n    })\r\n    .catch((error) => {\r\n      console.log(\"ERROR \", error);\r\n    });\r\n};\r\n\r\n//get the score of the cuurent match\r\n\r\nexport const getMatchDetail = (id) => {\r\n  const url = `https://cricapi.com/api/cricketScore?unique_id=${id}&apikey=${API_KEY}`;\r\n  return fetch(url)\r\n    .then((response) => response.json())\r\n    .catch((error) => console.log(error));\r\n};","import React, { useState } from \"react\";\r\n\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nimport {\r\n  Button,\r\n  Card,\r\n  CardActions,\r\n  CardContent,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogContentText,\r\n  DialogTitle,\r\n  Grid,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport { getMatchDetail } from \"../api/Api\";\r\nimport { CardGiftcardSharp } from \"@material-ui/icons\";\r\n\r\nconst MyCard = ({ match }) => {\r\n  const [detail, setDetail] = useState({});\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const handleClick = (id) => {\r\n    getMatchDetail(id)\r\n    .then((data)=> { \r\n      console.log(\"Match data\", data);\r\n      setDetail(data);\r\n      handleClickOpen();\r\n    })\r\n    .catch((error) => console.log(error));\r\n  }\r\n\r\n  const getMatchCard = () => (\r\n    <div>\r\n      <Card\r\n        style={{\r\n          background: match.matchStarted ? \"#e2e2e2\" : \"\",\r\n          marginTop: 15,\r\n        }}\r\n      >\r\n        <CardContent>\r\n          <Grid container justify=\"center\" alignItems=\"center\" spacing={4}>\r\n            <Grid item>\r\n              <Typography variant=\"h5\">{match[\"team-1\"]}</Typography>\r\n            </Grid>\r\n            <Grid item>\r\n              <img\r\n                style={{ width: 85 }}\r\n                src={require(\"../img/final.jpg\")}\r\n                alt=\"\"/>\r\n            </Grid>\r\n            <Grid item>\r\n              <Typography variant=\"h5\">{match[\"team-2\"]}</Typography>\r\n            </Grid>\r\n          </Grid>\r\n        </CardContent>\r\n\r\n        <CardActions>\r\n          <Grid container justify=\"center\">\r\n            <Button\r\n              onClick={() => {\r\n                handleClick(match.unique_id);\r\n              }}\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n            >\r\n              Show Detail\r\n            </Button>\r\n            <Button\r\n              style={{ marginLeft: 5 }}\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n            >\r\n              Starting time {new Date(match.dateTimeGMT).toLocaleString()}\r\n            </Button>\r\n          </Grid>\r\n        </CardActions>\r\n      </Card>\r\n    </div>\r\n  );\r\n\r\n  \r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const getDailog = () => { \r\n      <Dialog\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\">\r\n\r\n        <DialogTitle id=\"alert-dialog-title\">{\"Match Detail...\"}</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText id=\"alert-dialog-description\">\r\n            <Typography>{detail.stat}</Typography>\r\n            <Typography>\r\n              Match\r\n              <span style={{ fontStyle: \"italic\", fontWeight: \"bold\" }}>\r\n                {detail.matchStarted ? \"Started\" : \"Still not started\"}{\" \"}\r\n              </span>\r\n            </Typography>\r\n            <Typography>\r\n              Score\r\n              <span style={{ fontStyle: \"italic\", fontWeight: \"bold\" }}>\r\n                {\" \"}\r\n                {detail.score}\r\n              </span>\r\n            </Typography>\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color=\"primary\" autoFocus>\r\n            Close\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n  };\r\n\r\n  return\r\n    <React.Fragment>\r\n      {getMatchCard()}\r\n      {getDailog()}\r\n    </React.Fragment>\r\n};\r\n\r\n\r\nexport default MyCard;","import React, { useEffect, useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Navbar from \"./components/Navbar\";\nimport MyCard from \"./components/MyCard\";\nimport { getMatches } from \"./api/Api\";\nimport { Container, Grid, Typography } from \"@material-ui/core\";\n\nfunction App() {\n  const [matches, setMatches] = useState([]);\n\n  useEffect(() => {\n    getMatches()\n      .then((data) => {\n        setMatches(data.matches);\n        console.log(matches);\n      })    \n        .catch((error) => alert(\"could not load data\"));\n  \n  }, []);\n\n \n\n  return (\n    <div className=\"App\">\n      <Navbar />\n        <Typography variant=\"h3\" style= {{marginTop: 20}}>Welcome To My Live Cricket Score App</Typography>\n        <Grid container>\n        <Grid item sm=\"2\"></Grid>\n          <Grid item sm=\"8\">\n              {matches.map((match) => (\n                  <MyCard match=\"match\" />\n              \n            ))}\n          </Grid>\n        </Grid>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.0/8 are considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n      headers: { 'Service-Worker': 'script' },\r\n    })\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready\r\n        .then(registration => {\r\n          registration.unregister();\r\n        })\r\n        .catch(error => {\r\n          console.error(error.message);\r\n        });\r\n    }\r\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}